<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.mybatis.dao.IUserDao">
	<!-- 
		parameterType中的值是mybatis配置文件中配置的别名 
		parameterType该属性也是可以省略不写
	-->
	<insert id="insertUsers" parameterType="Users">
		insert into users(name,age,score) values(#{name},#{age},#{score})
	</insert>
	
	<insert id="insertUserCacheId">
		insert into users(name,age,score) values(#{name},#{age},#{score})
		<!-- 插入成功后获取id的值：第一个属性是指定id的类型，第二个属性是指定值是给类中的哪个属性的，第三个属性是指定执行插入后添加id的值 -->
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			select @@identity
		</selectKey>
		
		
	</insert>
	
	<delete id="deleteUserById">
		delete from users where id=#{id} 	<!-- 这里的#{}就是个占位符，里面内容放什么都行 -->
	</delete>
	
	
	<update id="updateUser">
		update users set name=#{name},age=#{age},score=#{score} where id=#{id}
	</update>
	
	<select id="selectAllUsers" resultType="Users">
		select id,name,age,score from users
	</select>
	
	
	<select id="selectUsersById" resultType="Users">
		select id,name,age,score from users where id=#{id}
	</select>
	
	<select id="selectUsersByName" resultType="Users">
		<!-- select id,name,age,score from users where name like concat('%',#{name},'%') -->
		<!-- select id,name,age,score from users where name like '%${value}%' --> <!-- 容易sql注入攻击 -->
		select id,name,age,score from users where name like '%' #{name} '%' <!-- 常用 -->
	</select>
	
	
	
	<!-- 
		在数据库表中的字段 和 定义的实体类中的属性名不一致时有两种方法解决
			1.第一种方法：
				在sql语句中给表的字段定义一个别名，如下：带t的是数据库中的字段，后面的就是别名，实体类中的属性
					select tid id,tname name,tage age,score from users
			2.第二种方法：
				使用resultMap这个属性，如下
	 -->
	 <!-- 这里只定义数据库中的字段与实体类中的属性不一致的，一致的就是用配置了 -->
	 <resultMap type="Users" id="usersMapper">
	 	<id column="tid" property="id"/>
	 	<result column="tname" property="name"/>
	 	<result column="tage" property="age"/>
	 </resultMap>
	
	<select id="selectUsers" resultMap="usersMapper">
		select id,name,age,score from users where id=#{id}
	</select>
	
	
</mapper>